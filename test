// --------------------------------------------------------------------------------------------------------------------
// <copyright company="First American" file="DropboxContext.cs">
//   (c) 2014 First American Professional Real Estate Services, Inc., operating through its GreenFolders division.
// </copyright>
// <summary>
//   Manages the core functionality of the GreenFolders Dropbox
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Timers;
using System.Windows.Forms;
using Microsoft.Win32;
using Timer = System.Timers.Timer;

namespace GF.GreenFolders.Dropbox
{
    public class DropboxContext : IDisposable
    {
        #region Private Members

        // Constant times (in milliseconds) and values
        private const int GREENFOLDERS_START_DELAY = 800;
        private const int INIT_FILEWATCHER_PERIODIC_TIME = 2500;
        private const int LOCKED_FILES_CLEANUP_REFRESH_INTERVAL = 5000;
        private const string FOLDER_NAME = "GreenFolders Dropbox";

        // Specific directory paths needed
        private readonly string _gfInstallPath;
        private readonly string _userDesktopPath = string.Empty;

        // Whether the GF process is already running
        private bool _isProcessRunning;

        // File watcher
        private FileSystemWatcher _fileSystemWatcher;

        // Notification area icon
        private IContainer _mComponents;
        private NotifyIcon _mNotifyIcon;
        private ContextMenuStrip _mContextMenu;
        private ToolStripMenuItem _mDisplayForm;
        private ToolStripMenuItem _mExitApplication;

        // Timers
        private Timer _processTimer;
        private Timer _initializeFileWatcherTimer;
        private Timer _lockedFilesCleanupTimer;

        // Thread-safety
        private readonly object _fileChangeLock = new object();
        private readonly SynchronizedCollection<string> _lockedFiles = new SynchronizedCollection<string>();
        #endregion

        /// <summary>
        /// Initializes the <see cref="DropboxContext"/>
        /// </summary>
        public DropboxContext()
        {

            // Initialize the icon
            InitNotificationIcon();

            try
            {
                _gfInstallPath = GetGfExecutablePathFromRegistry();
                //_userDesktopPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

                _userDesktopPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\GreenFolders\GreenFolders";

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + ex.StackTrace);
                Logger.Log(ex);
            }

            // Create folder\shortcuts if they don't exist
            CreateFolderAndShortcuts();

            if (DropboxFolderExists())
            {
                InitFileWatcher();
            }
            else
            {
                InitSetupFileWatcherTimer();
            }
        }

        #region NotificationIcon

        /// <summary>
        /// Initialize the notification area
        /// </summary>
        private void InitNotificationIcon()
        {
            _mComponents = new Container();

            _mNotifyIcon = new NotifyIcon(_mComponents);

            const string iconLocation = "GF.GreenFolders.Dropbox.greenfolders.ico";

            Assembly assembly = Assembly.GetExecutingAssembly();
            Stream stream = assembly.GetManifestResourceStream(iconLocation);
            if (stream != null)
            {
                using (stream)
                {
                    _mNotifyIcon.Icon = new Icon(stream);
                }
            }
            _mNotifyIcon.Text = @"GreenFolders Dropbox";
            _mNotifyIcon.Visible = true;

            _mContextMenu = new ContextMenuStrip();
            _mDisplayForm = new ToolStripMenuItem();
            _mExitApplication = new ToolStripMenuItem();

            _mNotifyIcon.DoubleClick += _mNotifyIcon_DoubleClick;
            _mNotifyIcon.ContextMenuStrip = _mContextMenu;

            _mDisplayForm.Text = @"Open GreenFolders Dropbox";
            _mDisplayForm.Click += _mDisplayForm_Click;
            _mContextMenu.Items.Add(_mDisplayForm);

            _mContextMenu.Items.Add(new ToolStripSeparator());

            _mExitApplication.Text = @"Exit";
            _mExitApplication.Click += _mExitApplication_Click;
            _mContextMenu.Items.Add(_mExitApplication);
        }

        private void CleanupNotificationIcon()
        {
            if (_mNotifyIcon != null)
            {
                _mNotifyIcon.Dispose();
                _mNotifyIcon = null;
            }
            if (_mComponents != null)
            {
                _mComponents.Dispose();
                _mComponents = null;
            }
        }

        #endregion

        #region FileWatcher (Init and Cleanup)

        /// <summary>
        /// Initializes the File Watcher
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "FileSystemWatcher disposed when object dies in CleanupFileWatcher method")]
        private void InitFileWatcher()
        {
            lock (_fileChangeLock)
            {
                _fileSystemWatcher = new FileSystemWatcher(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME)
                    {
                        NotifyFilter =
                            NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName |
                            NotifyFilters.DirectoryName,
                        Filter = "*.*",
                        EnableRaisingEvents = true,
                        IncludeSubdirectories = true
                    };
                _fileSystemWatcher.Created += fileSystemWatcher_Changed;
                _fileSystemWatcher.Changed += fileSystemWatcher_Changed;
                _fileSystemWatcher.Error += _fileSystemWatcher_Error;
                _fileSystemWatcher.Renamed += fileSystemWatcher_Changed;

                InitLockedFilesCleanupTimer();
            }
        }

        /// <summary>
        /// Cleans up the File Watcher
        /// </summary>
        private void CleanupFileWatcher()
        {
            lock (_fileChangeLock)
            {
                if (_fileSystemWatcher != null)
                {
                    _fileSystemWatcher.EnableRaisingEvents = false;
                    _fileSystemWatcher.Created -= fileSystemWatcher_Changed;
                    _fileSystemWatcher.Changed -= fileSystemWatcher_Changed;
                    _fileSystemWatcher.Error -= _fileSystemWatcher_Error;
                    _fileSystemWatcher.Renamed -= fileSystemWatcher_Changed;
                    _fileSystemWatcher.Dispose();
                    _fileSystemWatcher = null;
                }

                CleanupLockedFilesCleanupTimer();
            }
        }

        #endregion

        #region Timer to initialize FileWatcher (Init and Cleanup)

        /// <summary>
        /// Initializes the timer to poll if we can create a new file watcher yet or not
        /// </summary>
        private void InitSetupFileWatcherTimer()
        {
            if (_initializeFileWatcherTimer == null)
            {
                _initializeFileWatcherTimer = new Timer(INIT_FILEWATCHER_PERIODIC_TIME);
                _initializeFileWatcherTimer.Elapsed += InitFileWatcherTimer_Proc;
                _initializeFileWatcherTimer.Start();
            }
            else
            {
                _initializeFileWatcherTimer.Stop();
                _initializeFileWatcherTimer.Start();
            }
        }

        /// <summary>
        /// Event handler for when the timer procs to initialize a new file watcher
        /// </summary>
        private void InitFileWatcherTimer_Proc(object sender, ElapsedEventArgs e)
        {

            // Watcher already created
            if (_fileSystemWatcher != null)
            {
                CleanupSetupFileWatcherTimer();
                return;
            }

            if (DropboxFolderExists())
            {
                InitFileWatcher();
                CleanupSetupFileWatcherTimer();
            }
        }

        /// <summary>
        /// Cleans up the timer to create a new file watcher
        /// </summary>
        private void CleanupSetupFileWatcherTimer()
        {
            if (_initializeFileWatcherTimer != null)
            {
                _initializeFileWatcherTimer.Stop();
                _initializeFileWatcherTimer.Dispose();
                _initializeFileWatcherTimer = null;
            }
        }

        #endregion

        #region Timer to cleanup old locked files (Init and Cleanup)

        /// <summary>
        /// Initializes the timer to poll if we can create a new file watcher yet or not
        /// </summary>
        private void InitLockedFilesCleanupTimer()
        {
            if (_lockedFilesCleanupTimer == null)
            {
                _lockedFilesCleanupTimer = new Timer(LOCKED_FILES_CLEANUP_REFRESH_INTERVAL);
                _lockedFilesCleanupTimer.Elapsed += InitLockedFilesCleanup_Proc;
                _lockedFilesCleanupTimer.Start();
            }
            else
            {
                _lockedFilesCleanupTimer.Stop();
                _lockedFilesCleanupTimer.Start();
            }
        }

        /// <summary>
        /// Event handler for when the timer procs to initialize a new file watcher
        /// </summary>
        private void InitLockedFilesCleanup_Proc(object sender, ElapsedEventArgs e)
        {
            CleanupOldLockedFiles();
        }

        /// <summary>
        /// Cleans up the timer to create a new file watcher
        /// </summary>
        private void CleanupLockedFilesCleanupTimer()
        {
            if (_lockedFilesCleanupTimer != null)
            {
                _lockedFilesCleanupTimer.Stop();
                _lockedFilesCleanupTimer.Dispose();
                _lockedFilesCleanupTimer = null;
            }
        }

        #endregion


        /// <summary>
        /// Event handler for when an error occurs with the File Watcher
        /// </summary>
        private void _fileSystemWatcher_Error(object sender, ErrorEventArgs e)
        {

            // Cleanup the watcher
            CleanupFileWatcher();

            // Setup timer to initialize a new one whenever it becomes valid to do so again
            InitSetupFileWatcherTimer();
        }

        /// <summary>
        /// Event handler for when any folders or files change for the file watcher
        /// </summary>
        private void fileSystemWatcher_Changed(object sender, FileSystemEventArgs e)
        {
            lock (_fileChangeLock)
            {

                try
                {
                    if (File.Exists(e.FullPath))
                    {
                        // Ignore special .tmp files used by Windows, these will always be locked as well
                        if (e.FullPath.EndsWith(".tmp", StringComparison.CurrentCultureIgnoreCase))
                        {
                            return;
                        }

                        // Do nothing for hidden files
                        if ((File.GetAttributes(e.FullPath) & FileAttributes.Hidden) == FileAttributes.Hidden)
                        {
                            return;
                        }
                    }
                }
                catch
                {
                    return;
                }

                if (!_lockedFiles.Contains(e.FullPath))
                {

                    // Implemented for Word, often after saving, Word will temporarily unlock a file, and then lock it again, a tiny delay, fixes this
                    Thread.Sleep(50);

                    _lockedFiles.Add(e.FullPath);
                }
                if (_processTimer == null)
                {
                    _processTimer = new Timer(GREENFOLDERS_START_DELAY);
                    _processTimer.Elapsed += ProcessQueue;
                    _processTimer.Start();
                }
                else
                {
                    _processTimer.Stop();
                    _processTimer.Start();
                }
            }
        }

        /// <summary>
        /// Event handler for the timer to start GF after folder or file changes in the dropbox
        /// </summary>
        private void ProcessQueue(object sender, ElapsedEventArgs e)
        {
            lock (_fileChangeLock)
            {
                if (_processTimer != null)
                {
                    _processTimer.Stop();
                    _processTimer.Dispose();
                    _processTimer = null;
                }

                foreach (string lockedFilePath in _lockedFiles)
                {
                    if (IsFileLocked(lockedFilePath))
                    {
                        CopyLockedFile(lockedFilePath);
                    }
                    else
                    {
                        DeleteLockedFile(lockedFilePath);
                    }
                }
                _lockedFiles.Clear();

                StartGreenFolders();
            }
        }

        /// <summary>
        /// Attempt to start GreenFolders if we haven't already started one
        /// </summary>
        private void StartGreenFolders()
        {
            try
            {
                if (!string.IsNullOrEmpty(_gfInstallPath))
                {
                    string fileParameter = string.Format("\"{0}\" -dropbox", _userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
                    if (!_isProcessRunning)
                    {
                        var process = Process.Start(_gfInstallPath.ToString(), fileParameter);
                        _isProcessRunning = true;
                        process.EnableRaisingEvents = true;
                        process.Exited += process_Exited;
                    }
                }
            }
            catch
            {

            }
        }

        /// <summary>
        /// Occurs when the GF process exits
        /// </summary>
        private void process_Exited(object sender, EventArgs e)
        {
            _isProcessRunning = false;
            CleanupOldLockedFiles();
        }

        /// <summary>
        /// Determines if a file is locked and cannot be read or written to
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        private bool IsFileLocked(string path)
        {
            try
            {
                if (File.Exists(path))
                {
                    // Attempt to open it with read access
                    using (var stream = File.OpenRead(path))
                    {
                    }
                    File.Move(path, path);
                    return false;
                }

                return false;
            }
            catch
            {

                // If this fails, they either do not have access or it's locked
                return true;
            }
        }

        /// <summary>
        /// Deletes the .lock and .unlocked files for a particular file
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        private void DeleteLockedFile(string path)
        {
            try
            {
                if (File.Exists(path))
                {

                    // Delete locked file
                    if (File.Exists(path + ".lock"))
                    {
                        File.Delete(path + ".lock");
                    }

                    // Delete unlocked file
                    if (File.Exists(path + ".unlocked"))
                    {
                        File.Delete(path + ".unlocked");
                    }

                    System.Diagnostics.Debug.WriteLine("GF Dropbox: Update locked file Success!");
                }
            }
            catch
            {

                // If this fails, they do not have access or permissions
            }
        }

        /// <summary>
        /// Copies a file's contents and creates hidden lock and unlocked files
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        private void CopyLockedFile(string path)
        {
            try
            {
                if (File.Exists(path))
                {


                    // Extra Info: The system executes this asynchronously and sometimes too slowly and often it fails, we rename the file first to ensure it's deleted\moved
                    // If we do not delete the previous .unlocked file, copying even with overwrite will fail
                    if (File.Exists(path + ".unlocked"))
                    {
                        // Generate unique temp name
                        string newUnlockedFileName = path + Environment.TickCount + ".unlocked";
                        File.Move(path + ".unlocked", newUnlockedFileName);
                        File.Delete(newUnlockedFileName);
                    }

                    // Copy the file and add a special extension
                    File.Copy(path, path + ".unlocked", false);
                    File.SetAttributes(path + ".unlocked", FileAttributes.Hidden);

                    // Create an empty file with a ".lock" extension - we will automatically clean these up later since it's locked currently
                    if (!File.Exists(path + ".lock"))
                    {
                        using (File.Create(path + ".lock")) { }
                        File.SetAttributes(path + ".lock", FileAttributes.Hidden);
                    }

                    System.Diagnostics.Debug.WriteLine("GF Dropbox: Update locked file Success!");
                }
            }
            catch
            {

                // If this fails, they do not have access or permissions
            }
        }

        /// <summary>
        /// Cleans up old locked files
        /// </summary>
        private void CleanupOldLockedFiles()
        {
            lock (_fileChangeLock)
            {
                try
                {

                    // Search for ONLY files that end with .lock
                    string[] lockFiles = Directory.GetFiles(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME, "*.lock", SearchOption.AllDirectories);
                    foreach (string lockFile in lockFiles)
                    {

                        // Get original file name
                        string originalFileName = lockFile.Substring(0, lockFile.IndexOf(".lock", StringComparison.CurrentCultureIgnoreCase));

                        // If the original file exists, but the .unlocked file is gone, then it was added successfully
                        if (File.Exists(originalFileName))
                        {

                            if (!File.Exists(originalFileName + ".unlocked"))
                            {
                                // If the original file is no longer locked, then we're clear to remove it and the lock file
                                if (!IsFileLocked(originalFileName))
                                {
                                    File.Delete(originalFileName);
                                    File.Delete(lockFile);
                                }
                            }
                        }
                        else
                        {

                            // The original file is gone, just delete the lock file
                            File.Delete(lockFile);
                        }
                    }

                    // Search for ONLY files that end with .unlocked
                    string[] unlockedFiles = Directory.GetFiles(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME, "*.unlocked", SearchOption.AllDirectories);
                    foreach (string unlockedFile in unlockedFiles)
                    {

                        // Get original file name
                        string originalFileName = unlockedFile.Substring(0, unlockedFile.IndexOf(".unlocked", StringComparison.CurrentCultureIgnoreCase));

                        // If the original file no longer exists, but the .unlocked file does, then it means the original was eventully unlocked and added instead of the .unlocked file
                        // Just delete the .unlocked file since we no longer need it
                        if (!File.Exists(originalFileName))
                        {

                            // The original file is gone, just delete the .unlocked file
                            File.Delete(unlockedFile);
                        }
                    }
                }
                catch
                {

                    // If this fails, they do not have access or permissions
                }
            }
        }

        /// <summary>
        /// Determines if the Dropbox folder exists
        /// </summary>
        /// <returns></returns>
        private bool DropboxFolderExists()
        {
            try
            {
                if (!string.IsNullOrEmpty(_userDesktopPath) && !string.IsNullOrEmpty(FOLDER_NAME))
                {
                    return Directory.Exists(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Occurs when the notification icon is double-clicked
        /// </summary>
        private void _mNotifyIcon_DoubleClick(object sender, EventArgs e)
        {
            OpenDropbox();
        }

        /// <summary>
        /// Occurs when the display form menu item is clicked
        /// </summary>
        private void _mDisplayForm_Click(object sender, EventArgs e)
        {
            OpenDropbox();
        }

        /// <summary>
        /// Occurs when the exit menu item is clicked
        /// </summary>
        private void _mExitApplication_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        /// <summary>
        /// Opens the dropbox folder, if one does not exist, the user is prompted to create one
        /// </summary>
        private void OpenDropbox()
        {
            try
            {
                if (!Directory.Exists(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME))
                {
                    if (MessageBox.Show(
                        "The " + FOLDER_NAME + " folder does not exist, would you like to create it now?",
                        "GreenFolders Dropbox", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        if (string.IsNullOrEmpty(_gfInstallPath))
                        {
                            MessageBox.Show("Unable to create a new GreenFolders Dropbox folder.  GreenFolders is not installed.", "GreenFolders Dropbox", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        CreateFolderAndShortcuts();

                        if (DropboxFolderExists())
                        {
                            CleanupSetupFileWatcherTimer();
                            InitFileWatcher();
                        }
                    }
                    else
                    {
                        return;
                    }
                }

                // Open the GreenFolders Dropbox
                Process.Start(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
            }
            catch
            {
                MessageBox.Show("Unable to create a new GreenFolders Dropbox folder.  Please check your security permissions or contact an administrator.", "GreenFolders Dropbox", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Create main dropbox folder and shortcuts
        /// </summary>
        private void CreateFolderAndShortcuts()
        {
           
            // Create GreenFolders Dropbox directory
            bool dropboxDirectoryExists = Directory.Exists(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
            if (!dropboxDirectoryExists)
            {

                // Get install path
                string greenFoldersInstallPath = Path.GetDirectoryName(_gfInstallPath);

                DirectoryInfo info = Directory.CreateDirectory(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);

                // Create desktop.ini file for GreenFolders Dropbox directory
                using (StreamWriter writer = File.CreateText(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME + Path.DirectorySeparatorChar + "desktop.ini"))
                {
                    writer.WriteLine(@"[.ShellClassInfo]");
                    writer.WriteLine(@"InfoTip=Drag files into your GreenFolders Dropbox folder to automatically add them to GreenFolders.");
                    writer.WriteLine(@"IconFile={0}\gffolder.ico", greenFoldersInstallPath);
                    writer.WriteLine(@"IconIndex=0");
                }

                // Set attributes of desktop.ini file to be readonly and hidden, also set the GreenFolders Dropbox to be a system folder
                File.SetAttributes(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME + Path.DirectorySeparatorChar + "desktop.ini", FileAttributes.ReadOnly | FileAttributes.Hidden);
                info.Attributes = FileAttributes.System;

                // Create a "Links" shortcut, only applies to Vista and on.  We check if the directory exists since XP won't have this.
                string linksFolderPath = _userDesktopPath + @"\Links";
                if (Directory.Exists(linksFolderPath))
                {
                    if (!File.Exists(linksFolderPath + Path.DirectorySeparatorChar + "GreenFolders Dropbox.lnk"))
                    {
                        using (ShellShortcut shortcut = new ShellShortcut(ShellShortcut.LinkType.File))
                        {
                            shortcut.SetPath(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
                            shortcut.SetDescription(
                                "Drag files into your GreenFolders Dropbox folder to automatically add them to GreenFolders.");
                            shortcut.Save(linksFolderPath + Path.DirectorySeparatorChar + "GreenFolders Dropbox.lnk");
                        }
                    }
                }

                // Create a shortcut on the user's desktop
                string desktopFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                if (!File.Exists(desktopFolderPath + Path.DirectorySeparatorChar + "GreenFolders Dropbox.lnk"))
                {
                    using (ShellShortcut desktopShortcut = new ShellShortcut(ShellShortcut.LinkType.File))
                    {
                        desktopShortcut.SetPath(_userDesktopPath + Path.DirectorySeparatorChar + FOLDER_NAME);
                        desktopShortcut.SetDescription("Drag files into your GreenFolders Dropbox folder to automatically add them to GreenFolders.");
                        desktopShortcut.Save(desktopFolderPath + Path.DirectorySeparatorChar + "GreenFolders Dropbox.lnk");
                    }
                }

            }

            string localFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string localFolderSpecific = @"GreenFolders\GreenFolders\Temp";
            bool LocalDirectoryExists = Directory.Exists(localFolderPath + Path.DirectorySeparatorChar + localFolderSpecific);
            if (!LocalDirectoryExists)
            {
                DirectoryInfo lolcal = Directory.CreateDirectory(localFolderPath + Path.DirectorySeparatorChar + localFolderSpecific);
                lolcal.Attributes = FileAttributes.System;
            }
        }

        /// <summary>
        /// Gets the GF Install path
        /// </summary>
        /// <returns></returns>
        private string GetGfExecutablePathFromRegistry()
        {
            object registerValue = null;
            RegistryKey registryKey32 = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32);
            var openSubKey = registryKey32.OpenSubKey(@"SOFTWARE\greenfolders");
            if (openSubKey != null)
            {
                registerValue = openSubKey.GetValue("InstallPath", -1);
            }

            if (registerValue == null || string.Equals(registerValue.ToString(), "-1"))
            {
                var registryKey64 = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                openSubKey = registryKey64.OpenSubKey(@"SOFTWARE\greenfolders");
                if (openSubKey != null) registerValue = openSubKey.GetValue("InstallPath", -1);
            }

            // If it's still not valid, reterun empty
            if (registerValue == null || string.Equals(registerValue.ToString(), "-1"))
            {
                return string.Empty;
            }

            // Extra precaution to ensure
            string gfInstallPath = registerValue.ToString();
            //if (!string.Equals(Path.GetFileNameWithoutExtension(gfInstallPath), "greenfolders", StringComparison.CurrentCultureIgnoreCase) ||
            //    !string.Equals(Path.GetExtension(gfInstallPath), ".exe", StringComparison.CurrentCultureIgnoreCase) ||
            //    !string.Equals(Directory.GetCurrentDirectory(), Path.GetDirectoryName(gfInstallPath)))
            //{
            //    return string.Empty;
            //}

            return gfInstallPath;
        }

        /// <summary>
        /// Cleanup everything
        /// </summary>
        /// <remarks>
        /// It's important to cleanup the file watcher and notification icon.  
        /// If we do not, the dropbox folder can technically remain and cause issues later for installs\uninstalls even though it appears that it's gone
        /// </remarks>
        public void Dispose()
        {
            CleanupNotificationIcon();
            CleanupFileWatcher();
            CleanupSetupFileWatcherTimer();
        }


    }
}
